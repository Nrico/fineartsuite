<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Manage Artworks</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/css/main.css">
  <meta name="csrf-token" content="<%= csrfToken %>">
</head>
<body class="font-sans bg-white text-black">
    <%- include('../partials/navbar'); %>
    <% const dashboardUrl = user ? (user.role === 'artist' ? '/dashboard/artist' : user.role === 'gallery' ? '/dashboard/gallery' : '/dashboard') : '/dashboard'; %>
    <main class="max-w-3xl mx-auto p-6">
    <div class="border border-gray-200 p-6 rounded shadow">
      <h1 class="text-2xl mb-4 text-center">Artwork Management</h1>
      <% if (flash.error && flash.error.length) { %>
        <p class="text-red-600 mb-4"><%= flash.error[0] %></p>
      <% } %>
      <% if (flash.success && flash.success.length) { %>
        <p class="text-green-600 mb-4"><%= flash.success[0] %></p>
      <% } %>
      <form id="add-art" method="post" action="/dashboard/artworks" enctype="multipart/form-data" class="grid grid-cols-1 md:grid-cols-2 gap-4 file-or-url">
        <div>
          <label class="block text-sm font-medium" for="gallery_slug">Gallery</label>
          <select id="gallery_slug" name="gallery_slug" class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
            <% galleries.forEach(function(g){ %>
              <option value="<%= g.slug %>"><%= g.slug %></option>
            <% }) %>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium" for="artist_id">Artist ID</label>
          <input id="artist_id" type="text" name="artist_id" required class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </div>
        <div>
          <label class="block text-sm font-medium" for="title">Title</label>
          <input id="title" type="text" name="title" required class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </div>
        <div>
          <label class="block text-sm font-medium" for="medium">Medium</label>
          <select id="medium" name="medium" class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
            <option value="Oil">Oil</option>
            <option value="Acrylic">Acrylic</option>
            <option value="Digital">Digital</option>
            <option value="Watercolor">Watercolor</option>
            <option value="other">Other</option>
          </select>
          <input id="custom_medium" type="text" name="custom_medium" placeholder="Specify medium" class="mt-1 w-full border border-gray-300 rounded px-2 py-1 hidden">
        </div>
        <div>
          <label class="block text-sm font-medium" for="dimensions">Dimensions</label>
          <input id="dimensions" type="text" name="dimensions" required class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </div>
        <div id="price_wrapper" class="price-wrapper">
          <label class="block text-sm font-medium" for="price">Price</label>
          <input id="price" type="number" step="0.01" name="price" required class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </div>
        <div class="md:col-span-2">
          <label class="block text-sm font-medium" for="description">Description</label>
          <textarea id="description" name="description" class="mt-1 w-full border border-gray-300 rounded px-2 py-1"></textarea>
        </div>
        <div class="flex items-center">
          <input type="checkbox" id="framed" name="framed" value="1" class="mr-2">
          <label for="framed" class="text-sm">Framed</label>
        </div>
        <div class="flex items-center">
          <input type="checkbox" id="readyToHang" name="readyToHang" value="1" class="mr-2">
          <label for="readyToHang" class="text-sm">Ready to Hang</label>
        </div>
        <div>
          <label class="block text-sm font-medium" for="imageFile">Upload Image</label>
          <input id="imageFile" type="file" name="imageFile" accept="image/*" class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </div>
        <details class="text-sm text-gray-600 col-span-full">
          <summary class="cursor-pointer">Paste URL instead</summary>
          <input id="imageUrl" type="text" name="imageUrl" class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
        </details>
        <div>
          <label class="block text-sm font-medium" for="status">Availability</label>
          <select id="status" name="status" class="mt-1 w-full border border-gray-300 rounded px-2 py-1">
            <option value="available" selected>Available</option>
            <option value="inquire">Inquire</option>
            <option value="offer">Make an Offer</option>
            <option value="collected">Red Dot Collected</option>
          </select>
        </div>
        <div class="flex items-center">
          <input type="checkbox" id="isVisible" name="isVisible" value="1" class="mr-2" checked>
          <label for="isVisible" class="text-sm">Visible</label>
        </div>
        <div class="flex items-center">
          <input type="checkbox" id="isFeatured" name="isFeatured" value="1" class="mr-2">
          <label for="isFeatured" class="text-sm">Featured</label>
        </div>
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <button type="submit" class="save-btn bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded col-span-full flex items-center justify-center"><span class="status-text">Add Artwork</span></button>
      </form>
      <h2 class="text-xl mt-8 mb-4">Active Artworks</h2>
      <ul class="space-y-4" id="artwork-list">
        <% activeArtworks.forEach(function(art){ %>
          <li>
            <form class="art-form grid grid-cols-1 md:grid-cols-2 gap-4 file-or-url" data-id="<%= art.id %>" enctype="multipart/form-data">
              <input type="hidden" name="_csrf" value="<%= csrfToken %>">
              <input name="title" value="<%= art.title %>" class="border border-gray-300 rounded px-2 py-1 w-full">
              <div>
                <select name="medium" class="border border-gray-300 rounded px-2 py-1 w-full medium-select" data-current="<%= art.medium %>">
                  <option value="Oil">Oil</option>
                  <option value="Acrylic">Acrylic</option>
                  <option value="Digital">Digital</option>
                  <option value="Watercolor">Watercolor</option>
                  <option value="other">Other</option>
                </select>
                <input name="custom_medium" class="border border-gray-300 rounded px-2 py-1 w-full mt-1 hidden" placeholder="Specify medium">
              </div>
              <input name="dimensions" value="<%= art.dimensions %>" class="border border-gray-300 rounded px-2 py-1 w-full">
                <div class="price-wrapper">
                  <input type="number" step="0.01" name="price" value="<%= art.price %>" class="border border-gray-300 rounded px-2 py-1 w-full">
                </div>
                <label class="block text-sm font-medium col-span-full">Description
                  <textarea name="description" class="mt-1 w-full border border-gray-300 rounded px-2 py-1"><%= art.description || '' %></textarea>
                </label>
                <div class="flex items-center">
                  <input type="checkbox" name="framed" value="1" class="mr-2" <%= art.framed ? 'checked' : '' %>>
                  <span class="text-sm">Framed</span>
                </div>
                <div class="flex items-center">
                  <input type="checkbox" name="readyToHang" value="1" class="mr-2" <%= art.ready_to_hang ? 'checked' : '' %>>
                  <span class="text-sm">Ready to Hang</span>
                </div>
                <input type="file" name="imageFile" accept="image/*" class="border border-gray-300 rounded px-2 py-1 w-full">
                <details class="text-sm text-gray-600">
                  <summary class="cursor-pointer">Paste URL instead</summary>
                  <input name="imageUrl" class="border border-gray-300 rounded px-2 py-1 w-full">
                </details>
              <select name="status" class="border border-gray-300 rounded px-2 py-1 w-full status-select" data-current="<%= art.status %>">
                <option value="available">Available</option>
                <option value="inquire">Inquire</option>
                <option value="offer">Make an Offer</option>
                <option value="collected">Red Dot Collected</option>
              </select>
              <div class="flex items-center">
                <input type="checkbox" name="isVisible" value="1" class="mr-2" <%= art.isVisible ? 'checked' : '' %>>
                <label class="text-sm">Visible</label>
              </div>
              <div class="flex items-center">
                <input type="checkbox" name="isFeatured" value="1" class="mr-2" <%= art.isFeatured ? 'checked' : '' %>>
                <label class="text-sm">Featured</label>
              </div>
              <div class="flex gap-2">
                <button type="submit" class="save-btn bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded flex items-center justify-center"><span class="status-text">Save</span></button>
                <button type="button" class="delete bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded">Delete</button>
                <button type="button" class="archive bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded">Archive</button>
              </div>
            </form>
            <span class="text-sm text-gray-600">(<%= art.artist_id %>)</span>
          </li>
        <% }) %>
      </ul>
      <details class="mt-6" id="archived-artworks">
        <summary class="cursor-pointer">Archived Artworks (<%= archivedArtworks.length %>)</summary>
        <ul class="space-y-2 mt-4 text-gray-500">
          <% archivedArtworks.forEach(function(art){ %>
            <li class="flex items-center justify-between bg-gray-100 rounded p-2 opacity-60">
              <span><%= art.title %> (<%= art.artist_id %>)</span>
              <button type="button" class="unarchive bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded" data-id="<%= art.id %>">Unarchive</button>
            </li>
          <% }) %>
        </ul>
      </details>
        <p class="mt-6"><a href="<%= dashboardUrl %>" class="text-blue-600 underline">Back to dashboard</a></p>
    </div>
  </main>
  <footer class="text-center py-6 border-t border-gray-200 mt-12">
    <p class="text-sm text-gray-500">&copy; <%= new Date().getFullYear() %> FineArtSuite</p>
  </footer>
  <script>
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    function setupFileUrlToggle(container) {
      const fileInput = container.querySelector('input[type="file"]');
      const urlInput = container.querySelector('input[name="imageUrl"]');
      if (!fileInput || !urlInput) return;
      fileInput.addEventListener('change', () => {
        urlInput.disabled = fileInput.files.length > 0;
      });
      urlInput.addEventListener('input', () => {
        fileInput.disabled = urlInput.value.trim() !== '';
      });
    }
    document.querySelectorAll('.file-or-url').forEach(setupFileUrlToggle);

    function handleMediumSelect(select) {
      const custom = select.parentElement.querySelector('input[name="custom_medium"]');
      const current = select.getAttribute('data-current');
      if (current) select.value = current;
      if (select.value === 'other') custom.classList.remove('hidden');
      select.addEventListener('change', () => {
        if (select.value === 'other') {
          custom.classList.remove('hidden');
        } else {
          custom.classList.add('hidden');
        }
      });
    }

    function handleStatusSelect(select) {
      const wrapper = select.closest('form').querySelector('.price-wrapper');
      const input = wrapper ? wrapper.querySelector('input[name="price"]') : null;
      const wasRequired = input && input.hasAttribute('required');
      const current = select.getAttribute('data-current');
      if (current) select.value = current;
      function toggle() {
        if (!wrapper || !input) return;
        if (select.value === 'collected') {
          wrapper.classList.add('hidden');
          input.value = '';
          if (wasRequired) input.removeAttribute('required');
        } else {
          wrapper.classList.remove('hidden');
          if (wasRequired) input.setAttribute('required', '');
        }
      }
      toggle();
      select.addEventListener('change', toggle);
    }

    document.querySelectorAll('.medium-select').forEach(handleMediumSelect);
    document.querySelectorAll('.status-select').forEach(handleStatusSelect);
    handleStatusSelect(document.getElementById('status'));

    const addForm = document.getElementById('add-art');
    addForm.addEventListener('submit', async e => {
      e.preventDefault();
      const btn = addForm.querySelector('.save-btn');
      const label = btn.querySelector('.status-text');
      const original = label.textContent;
      btn.disabled = true;
      label.textContent = 'Saving...';
      const data = new FormData(addForm);
      try {
        const res = await fetch('/dashboard/artworks', {
          method: 'POST',
          headers: { 'CSRF-Token': csrfToken },
          body: data
        });
        if (!res.ok) {
          const errText = await res.text();
          throw new Error(errText || res.statusText);
        }
        label.textContent = 'Saved!';
        setTimeout(() => { location.reload(); }, 1500);
      } catch (err) {
        label.textContent = 'Save failed' + (err.message ? ': ' + err.message : '');
        btn.disabled = false;
        setTimeout(() => { label.textContent = original; }, 2000);
      }
    });

    document.querySelectorAll('.art-form').forEach(f => {
      const id = f.dataset.id;
      const btn = f.querySelector('.save-btn');
      const label = btn.querySelector('.status-text');
      const original = label.textContent;
      f.addEventListener('submit', async e => {
        e.preventDefault();
        btn.disabled = true;
        label.textContent = 'Saving...';
        const formData = new FormData(f);
        try {
          const res = await fetch('/dashboard/artworks/' + id, {
            method: 'PUT',
            headers: { 'CSRF-Token': csrfToken },
            body: formData
          });
          if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || res.statusText);
          }
          label.textContent = 'Saved!';
          setTimeout(() => { label.textContent = original; btn.disabled = false; }, 1500);
        } catch (err) {
          label.textContent = 'Save failed' + (err.message ? ': ' + err.message : '');
          btn.disabled = false;
          setTimeout(() => { label.textContent = original; }, 2000);
        }
      });
      f.querySelector('.delete').addEventListener('click', async e => {
        e.preventDefault();
        try {
          const res = await fetch('/dashboard/artworks/' + id, { method: 'DELETE', headers: { 'CSRF-Token': csrfToken } });
          if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || res.statusText);
          }
          location.reload();
        } catch (err) {
          label.textContent = 'Delete failed' + (err.message ? ': ' + err.message : '');
          btn.disabled = false;
          setTimeout(() => { label.textContent = original; }, 2000);
        }
      });
      const archiveBtn = f.querySelector('.archive');
      if (archiveBtn) {
        archiveBtn.addEventListener('click', async e => {
          e.preventDefault();
          try {
            const res = await fetch('/dashboard/artworks/' + id + '/archive', { method: 'PATCH', headers: { 'CSRF-Token': csrfToken } });
            if (!res.ok) {
              const errText = await res.text();
              throw new Error(errText || res.statusText);
            }
            location.reload();
          } catch (err) {
            label.textContent = 'Archive failed' + (err.message ? ': ' + err.message : '');
            setTimeout(() => { label.textContent = original; }, 2000);
          }
        });
      }
    });
    document.querySelectorAll('#archived-artworks .unarchive').forEach(btn => {
      const id = btn.getAttribute('data-id');
      btn.addEventListener('click', async e => {
        e.preventDefault();
        try {
          const res = await fetch('/dashboard/artworks/' + id + '/unarchive', { method: 'PATCH', headers: { 'CSRF-Token': csrfToken } });
          if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || res.statusText);
          }
          location.reload();
        } catch (err) {
          btn.textContent = 'Error';
          setTimeout(() => { btn.textContent = 'Unarchive'; }, 2000);
        }
      });
    });
  </script>
</body>
</html>
